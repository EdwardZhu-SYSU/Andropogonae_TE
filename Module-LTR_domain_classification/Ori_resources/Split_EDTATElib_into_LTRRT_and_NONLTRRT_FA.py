import re
import os
import sys

'''
Parse TE Library Generated By EDTA
and Extract LTR-RT and Non LTR-RT TEs into Different FA Files

USAGE: python Split_EDTATElib_into_LTRRT_and_NONLTRRT_FA.py XXX.mod.EDTA.TElib.fa
'''
frag_dict = {}  # TE_tag => TE_raw_sequence
LTR_RT_comp = []  # [[TE1_tag, TE1_raw_sequence], [TE2_tag, TE2_raw_sequence]]
non_LTR_RT_comp = []  # [[TE1_tag, TE1_raw_sequence], [TE2_tag, TE2_raw_sequence]]

match_rule_LTR_RT = re.compile(r'^>(?P<TEID>TE_\d+)_(LTR|INT)#LTR/(?P<SUPFAM>Gypsy|Copia|unknown)$')


def extract_fa_tag(input_EDTA_TElib):
    current_frag_list = []
    frag_tag = ""

    with open(input_EDTA_TElib, mode='r') as lines:
        for line in lines:
            if line.startswith(">"):
                if current_frag_list:  # Handle The Fragment Before
                    frag_dict[frag_tag] = "".join(current_frag_list)
                    current_frag_list.clear()

                frag_tag = line.rstrip("\n")
                continue

            current_frag_list.append(line.rstrip("\n"))
        frag_dict[frag_tag] = "".join(current_frag_list)  # Handle The Last Fragment

    print("Identified %d entries from %s" % (len(frag_dict.keys()), input_EDTA_TElib))


def filter_LTR_RT():
    copia_count = 0
    gypsy_count = 0
    unknown_count = 0
    for k, v in frag_dict.items():
        TE_clade = re.search(match_rule_LTR_RT, k)
        if TE_clade:
            LTR_RT_comp.append([k, v])
            if TE_clade.group("SUPFAM") == "Gypsy":
                gypsy_count += 1
            elif TE_clade.group("SUPFAM") == "Copia":
                copia_count += 1
            else:
                unknown_count += 1
        else:
            non_LTR_RT_comp.append([k, v])
    with open("./EDTA_LTR-RT_overview.txt", mode='w') as overview:
        overview.write("\n\n%d LTR-RT sequence and %d non LTR-RT TE sequence parsed." % (len(LTR_RT_comp), len(non_LTR_RT_comp)))
        overview.write("Of all LTR-RT elements,\nGypsy: %d\nCopia: %d\nunknown: %d\n\n" % (gypsy_count, copia_count, unknown_count))


def output_fa():
    with open('./EDTA_TElib_LTRRT.fa', mode='w') as output1:
        for indv_TE in LTR_RT_comp:
            output1.write(str(indv_TE[0]).rstrip("\n") + "\n")
            output1.write(str(indv_TE[1]).rstrip("\n") + "\n")
    with open('./EDTA_TElib_nonLTRRT.fa', mode='w') as output2:
        for indv_TE in non_LTR_RT_comp:
            output2.write(str(indv_TE[0]).rstrip("\n") + "\n")
            output2.write(str(indv_TE[1]).rstrip("\n") + "\n")
    print("output ok.\n./EDTA_TElib_LTRRT.fa\n./EDTA_TElib_nonLTRRT.fa")


def Extract_LTR_RT_fa(TElib_fa):
    extract_fa_tag(TElib_fa)
    filter_LTR_RT()
    output_fa()


if __name__ == "__main__":
    extract_fa_tag(sys.argv[1])
    filter_LTR_RT()
    output_fa()
