import re
import os
import sys

'''
Parse RepeatMasker Library Generated By TEsorter
and Extract Different TE Clades into Different FA Files
for Further Linclust Clustering (80-80-80 rule)

USAGE: python Split_TEsorter_lib_into_different_FA.py XXX.EDTA.TElib.fa.rexdb-plant.cls.lib
'''
frag_dict = {}  # TE_tag => TE_raw_sequence
TE_all_comp = {}  # TE_type => [[TE1_tag, TE1_raw_sequence], [TE2_tag, TE2_raw_sequence]]
match_rule_TE_type = re.compile(r'^.*?#(?P<CLADE_TESORTER>.*?) .*?#(?P<CLADE_EDTA>.*?)$')
match_rule_TE_type_single = re.compile(r'^.*?#(?P<CLADE_EDTA>.*?)$')


def extract_TE_clade(input_RM_lib):
    current_frag_list = []
    frag_tag = ""

    with open(input_RM_lib, mode='r') as lines:
        for line in lines:
            if line.startswith(">"):
                if current_frag_list:  # Handle The Fragment Before
                    frag_dict[frag_tag] = "".join(current_frag_list)
                    current_frag_list.clear()

                frag_tag = line.rstrip("\n")
                continue

            current_frag_list.append(line.rstrip("\n"))
        frag_dict[frag_tag] = "".join(current_frag_list)  # Handle The Last Fragment

    print("Identified %d entries from %s" % (len(frag_dict.keys()), input_RM_lib))


def sort_TE_clade():
    for k, v in frag_dict.items():
        TE_clade = re.search(match_rule_TE_type, k)
        if TE_clade:

            TE_clade_to_use = str(TE_clade.group('CLADE_TESORTER'))

            if TE_clade_to_use == "Unknown":
                TE_clade_to_use = str(TE_clade.group('CLADE_EDTA'))

            ##################CUSTOM REPLACEMENTS#####################
            if TE_clade_to_use == "Helitron":
                TE_clade_to_use = "DNA/Helitron"
                # if str(TE_clade.group('CLADE_EDTA')) == "DNA/Helitron":
                    # TE_clade_to_use = str(TE_clade.group('CLADE_EDTA'))

            if TE_clade_to_use == "mixture":
                TE_clade_to_use = str(TE_clade.group('CLADE_EDTA'))

            if TE_clade_to_use == "LTR/mixture":
                TE_clade_to_use = str(TE_clade.group('CLADE_EDTA'))
            ##################CUSTOM REPLACEMENTS#####################

            if TE_clade_to_use not in TE_all_comp.keys():
                TE_all_comp[TE_clade_to_use] = []

            TE_all_comp[TE_clade_to_use].append([k, v])
        else:

            TE_clade = re.search(match_rule_TE_type_single, k)
            if TE_clade:
                TE_clade_to_use = str(TE_clade.group('CLADE_EDTA'))
                if TE_clade_to_use not in TE_all_comp.keys():
                    TE_all_comp[TE_clade_to_use] = []

                TE_all_comp[TE_clade_to_use].append([k, v])
            else:
                print("No Match TEID: %s" % k)


def output_TE_clade():
    os.system('mkdir ./TE_FA_by_clade')
    for k, v in TE_all_comp.items():
        TE_type_output_filename = re.sub('\/', '_', k) + ".fa"
        with open('./TE_FA_by_clade/' + TE_type_output_filename, mode='w') as output:
            for indv_TE in v:
                output.write(str(indv_TE[0]).rstrip("\n") + "\n")
                output.write(str(indv_TE[1]).rstrip("\n") + "\n")
    print("output ok")


if __name__ == "__main__":
    extract_TE_clade(sys.argv[1])
    sort_TE_clade()
    output_TE_clade()
